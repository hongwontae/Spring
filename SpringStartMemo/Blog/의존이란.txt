A가 B를  의존한다.
의존 대상 B가 변경된다면, 해당 변경의 영향이 A에도 영향을 미친다는 것을 의미한다.

강한 결합
=> 쉽게 말하자면 객체 내부에서 다른 객체를 생성하는 것을 의미한다.
=> A클래스 내에서 B클래스 객체를 직접 생성하고 있다면, B라는 객체를 C객체로 바꾸고 싶을 경우 A클라스도 수정해야 되는 상황의 결합이라는 뜻이다.

느슨한 결합
=> 객체를 주입 받는다는 것은 외부에서 생성된 객체를 인터페이스를 통해서 넘겨받는다는 것이다.
=> 런타임시에 의존관계가 결정된다.

의존성 주입 방식은 3가지가 있다. 생성자, setter, 필드

1. 생성자 주입 (가장 중요한 방식이고 제일 추천하는 방식)
=> 단일 생성자의 경우 AutoWired 필요없지만 생성자가 2개 이상이면 어노테이션이 필요하다.
=> 생성자 주입은 다른 주입과 다르게 필드를 final로 선언이 가능하다.
=> @RequiredArgsConstructor => final이나 @NotNull을 사용한 필드에 대한 생성자를 자동으로 추가해준다.
(그래서 private final BoardService boardService를 선언했던 것이다.)

2. 필드 주입 (가장 비추천 방식)
=> 필드를 선언하고 @AutoWired를 선언하면 끝이다.
=> final 불가

3. 수정자(setter)주입 
=> Setter를 이용해서 주입한다.

왜 생성자 주입을 선호할까?

필드, setter 주입은 먼저 빈을 생성한 후에 주입하려는 빈을 찾아 주입한다.
생성자 주입은 먼저 생성자의 인자에 사용되는 빈을 찾거나 빈 팩토리에서 만든다. 이후 찾은 인자 빈으로 주입하려는 
빈의 생성자를 호출한다. => 먼저 빈을 생성하지 않고 주입하려는 빈을 먼저 찾는다.
=> 순환 참조를 막아준다.

final 선언이 가능하다.
=> 런타임에 객체 불변성을 보장한다.

테스트 코드 작성이 용이하다.
























